{"version":3,"sources":["index.js"],"names":["Square","props","className","winner","onClick","value","Board","i","isWinningSquare","this","checkWinningSquare","squares","squareLocation","winningSquares","length","j","numSquares","board","row","currentRow","col","push","key","renderSquare","React","Component","Toggle","currentlyAscending","Game","state","started","history","Array","fill","location","stepNumber","xIsNext","startGame","slice","calculateWinner","setState","concat","step","includes","calculateCoordinate","getBoard","status","getHistory","currentBoard","getCurrentBoard","moves","map","move","coordinate","getCoordinate","desc","jumpTo","isCurrentlyAscending","reverse","handleClick","toggleClicked","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"uQAIA,SAASA,EAAOC,GACd,OACE,4BACEC,UAAS,iBAAYD,EAAME,OAAS,SAAW,IAC/CC,QAASH,EAAMG,SAEdH,EAAMI,O,IAKPC,E,2KACSC,GAAI,IAAD,OACRC,EAAkBC,KAAKC,mBAAmBH,GAEhD,OACE,kBAACP,EAAD,CACEK,MAAOI,KAAKR,MAAMU,QAAQJ,GAC1BJ,OAAQK,EACRJ,QAAS,kBAAM,EAAKH,MAAMG,QAAQG,Q,yCAKrBK,GACjB,GAAyC,IAArCH,KAAKR,MAAMY,eAAeC,OAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAIN,KAAKR,MAAMY,eAAeC,OAAQC,IACpD,GAAIN,KAAKR,MAAMY,eAAeE,KAAOH,EACnC,OAAO,I,+BAUb,IAHA,IAAII,EAAa,EACbC,EAAQ,GAEHC,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAEhC,IADA,IAAIC,EAAa,GACRC,EAAM,EAAGA,EAAM,EAAGA,IACzBD,EAAWE,KACT,0BAAMC,IAAKN,GAAaP,KAAKc,aAAaP,KAE5CA,IAEFC,EAAMI,KACJ,yBAAKC,IAAKJ,EAAKhB,UAAU,aACtBiB,IAKP,OAAO,6BAAMF,O,GA1CGO,IAAMC,WA8C1B,SAASC,EAAOzB,GACd,OACE,4BAAQG,QAASH,EAAMG,SAAvB,YAEGH,EAAM0B,mBAAqB,cAAgB,c,IAK5CC,E,kDACJ,WAAY3B,GAAQ,IAAD,8BACjB,cAAMA,IACD4B,MAAQ,CACXC,SAAS,EACTC,QAAS,CACP,CACEpB,QAASqB,MAAM,GAAGC,KAAK,MACvBC,SAAU,OAGdC,WAAY,EACZC,SAAS,EACTT,oBAAoB,GAZL,E,wDAgBPpB,GACLE,KAAKoB,MAAMC,SACdrB,KAAK4B,YAEP,IAAMN,EAAUtB,KAAKoB,MAAME,QAAQO,MAAM,EAAG7B,KAAKoB,MAAMM,WAAa,GAE9DxB,EADeoB,EAAQA,EAAQjB,OAAS,GACjBH,QAAQ2B,QACjCC,EAAgB5B,IAAYA,EAAQJ,KAGxCI,EAAQJ,GAAKE,KAAKoB,MAAMO,QAAU,IAAM,IACxC3B,KAAK+B,SAAS,CACZT,QAASA,EAAQU,OAAO,CACtB,CACE9B,QAASA,EACTuB,SAAU3B,KAGd4B,WAAYJ,EAAQjB,OACpBsB,SAAU3B,KAAKoB,MAAMO,a,6BAIlBM,GACLjC,KAAK+B,SAAS,CACZL,WAAYO,EACZN,QAASM,EAAO,IAAM,M,kCAKxBjC,KAAK+B,SAAS,CACZV,SAAS,M,mCAKX,OAAOrB,KAAKoB,MAAME,U,+BAGXW,GACP,OAAOjC,KAAKoB,MAAME,QAAQW,K,wCAI1B,OAAOjC,KAAKoB,MAAME,QAAQtB,KAAKoB,MAAMM,c,oCAGzBO,GAIZ,OAiGJ,SAA6BR,GAS3B,IARA,IAAMjB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGHG,EAAMc,EAAW,EACnBhB,EAAM,EACDX,EAAI,EAAGA,EAAIU,EAAMH,OAAQP,IAC5BU,EAAMV,GAAGoC,SAAST,KACpBhB,EAAMX,GAIV,MAAM,IAAN,OAAWa,EAAX,aAAmBF,EAAnB,KAjHqB0B,CAFEnC,KAAKoC,SAASH,GACLR,Y,sCAM9BzB,KAAK+B,SAAS,CACZb,oBAAqBlB,KAAKoB,MAAMF,uB,+BAI1B,IAKJmB,EALG,OACDf,EAAUtB,KAAKsC,aACfC,EAAevC,KAAKwC,kBACpB9C,EAASoC,EAAgBS,EAAarC,SAGxCE,EAAiB,GACrB,GAAIV,EAAQ,CACV2C,EAAS,WAAa3C,EAAO,GAC7B,IAAK,IAAII,EAAI,EAAGA,EAAIJ,EAAOW,OAAQP,IACjCM,EAAeQ,KAAKlB,EAAOI,SAG7BuC,EAAS,iBAAmBrC,KAAKoB,MAAMO,QAAU,IAAM,KAGzD,IAAMc,EAAQnB,EAAQoB,KAAI,SAACT,EAAMU,GAC/B,IAAMC,EAAa,EAAKC,cAAcF,GAChCG,EAAOH,EACT,eAAiBA,EAAO,QAAUC,EAClC,mBACJ,OACE,wBAAI/B,IAAK8B,GACP,4BACElD,UAAS,UAAK,EAAK2B,MAAMM,aAAeiB,EAAO,cAAgB,IAC/DhD,QAAS,kBAAM,EAAKoD,OAAOJ,KAE1BG,OAMHE,EAAuBhD,KAAKoB,MAAMF,mBAMxC,OAJK8B,GACHP,EAAMQ,UAIN,yBAAKxD,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACI,EAAD,CACEK,QAASqC,EAAarC,QACtBE,eAAgBA,EAChBT,QAAS,SAACG,GAAD,OAAO,EAAKoD,YAAYpD,OAGrC,yBAAKL,UAAU,aACb,6BACE,kBAACwB,EAAD,CACEC,mBAAoB8B,EACpBrD,QAAS,kBAAM,EAAKwD,oBAGxB,6BAAMd,GACN,4BAAKI,S,GAtII1B,IAAMC,WAiJzB,SAASc,EAAgB5B,GAWvB,IAVA,IAAMkD,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAtD,EAAI,EAAGA,EAAIsD,EAAM/C,OAAQP,IAAK,CAAC,IAAD,cACnBsD,EAAMtD,GADa,GAC9BuD,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIrD,EAAQmD,IAAMnD,EAAQmD,KAAOnD,EAAQoD,IAAMpD,EAAQmD,KAAOnD,EAAQqD,GAEpE,MADoB,CAACrD,EAAQmD,GAAIA,EAAGC,EAAGC,GAI3C,OAAO,KApBTC,IAASC,OAAO,kBAACtC,EAAD,MAAUuC,SAASC,eAAe,W","file":"static/js/main.4f658a2a.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return (\n    <button\n      className={`square ${props.winner ? 'winner' : ''}`}\n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    const isWinningSquare = this.checkWinningSquare(i);\n\n    return (\n      <Square\n        value={this.props.squares[i]}\n        winner={isWinningSquare}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  checkWinningSquare(squareLocation) {\n    if (this.props.winningSquares.length === 3) {\n      for (let j = 0; j < this.props.winningSquares.length; j++) {\n        if (this.props.winningSquares[j] === squareLocation) {\n          return true;\n        }\n      }\n    }\n  }\n\n  render() {\n    let numSquares = 0;\n    let board = [];\n\n    for (let row = 0; row < 3; row++) {\n      let currentRow = [];\n      for (let col = 0; col < 3; col++) {\n        currentRow.push(\n          <span key={numSquares}>{this.renderSquare(numSquares)}</span>\n        );\n        numSquares++;\n      }\n      board.push(\n        <div key={row} className=\"board-row\">\n          {currentRow}\n        </div>\n      );\n    }\n\n    return <div>{board}</div>;\n  }\n}\n\nfunction Toggle(props) {\n  return (\n    <button onClick={props.onClick}>\n      Change to\n      {props.currentlyAscending ? ' Descending' : ' Ascending'}\n    </button>\n  );\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      started: false,\n      history: [\n        {\n          squares: Array(9).fill(null),\n          location: null,\n        },\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      currentlyAscending: true,\n    };\n  }\n\n  handleClick(i) {\n    if (!this.state.started) {\n      this.startGame();\n    }\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const currentBoard = history[history.length - 1];\n    const squares = currentBoard.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n          location: i,\n        },\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n    });\n  }\n\n  startGame() {\n    this.setState({\n      started: true,\n    });\n  }\n\n  getHistory() {\n    return this.state.history;\n  }\n\n  getBoard(step) {\n    return this.state.history[step];\n  }\n\n  getCurrentBoard() {\n    return this.state.history[this.state.stepNumber];\n  }\n\n  getCoordinate(step) {\n    const currentBoard = this.getBoard(step);\n    const location = currentBoard.location;\n    const coordinate = calculateCoordinate(location);\n    return coordinate;\n  }\n\n  toggleClicked() {\n    this.setState({\n      currentlyAscending: !this.state.currentlyAscending,\n    });\n  }\n\n  render() {\n    const history = this.getHistory();\n    const currentBoard = this.getCurrentBoard();\n    const winner = calculateWinner(currentBoard.squares);\n\n    let status;\n    let winningSquares = [];\n    if (winner) {\n      status = 'Winner: ' + winner[0];\n      for (let i = 1; i < winner.length; i++) {\n        winningSquares.push(winner[i]);\n      }\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    const moves = history.map((step, move) => {\n      const coordinate = this.getCoordinate(move);\n      const desc = move\n        ? 'Go to move #' + move + ': at ' + coordinate\n        : 'Go to game start';\n      return (\n        <li key={move}>\n          <button\n            className={`${this.state.stepNumber === move ? 'currentStep' : ''}`}\n            onClick={() => this.jumpTo(move)}\n          >\n            {desc}\n          </button>\n        </li>\n      );\n    });\n\n    const isCurrentlyAscending = this.state.currentlyAscending;\n\n    if (!isCurrentlyAscending) {\n      moves.reverse();\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={currentBoard.squares}\n            winningSquares={winningSquares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>\n            <Toggle\n              currentlyAscending={isCurrentlyAscending}\n              onClick={() => this.toggleClicked()}\n            />\n          </div>\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      const winnerStats = [squares[a], a, b, c];\n      return winnerStats;\n    }\n  }\n  return null;\n}\n\nfunction calculateCoordinate(location) {\n  const board = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n  ];\n\n  const col = location % 3;\n  let row = 0;\n  for (let i = 0; i < board.length; i++) {\n    if (board[i].includes(location)) {\n      row = i;\n    }\n  }\n\n  return `(${col}, ${row})`;\n}\n"],"sourceRoot":""}