{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","numSquares","board","row","currentRow","col","push","key","renderSquare","React","Component","Toggle","state","currentlyAscending","Game","started","history","Array","fill","location","stepNumber","xIsNext","startGame","slice","length","calculateWinner","setState","concat","step","includes","calculateCoordinate","getBoard","alert","status","getHistory","currentBoard","getCurrentBoard","winner","moves","map","move","coordinate","getCoordinate","desc","jumpTo","handleClick","toggleClicked","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0480cb1a.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    let numSquares = 0;\n    let board = [];\n\n    for (let row = 0; row < 3; row++) {\n      let currentRow = [];\n      for (let col = 0; col < 3; col++) {\n        currentRow.push(\n          <span key={numSquares}>{this.renderSquare(numSquares)}</span>\n        );\n        numSquares++;\n      }\n      board.push(\n        <div key={row} className=\"board-row\">\n          {currentRow}\n        </div>\n      );\n    }\n\n    return <div>{board}</div>;\n  }\n}\n\nclass Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentlyAscending: true,\n    };\n  }\n\n  render() {\n    return (\n      <button onClick={this.props.onClick}>\n        Currently in Ascending List:{' '}\n        {this.state.currentlyAscending ? 'true' : 'false'}\n      </button>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      started: false,\n      history: [\n        {\n          squares: Array(9).fill(null),\n          location: null,\n        },\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n    };\n  }\n\n  handleClick(i) {\n    if (!this.state.started) {\n      this.startGame();\n    }\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const currentBoard = history[history.length - 1];\n    const squares = currentBoard.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n          location: i,\n        },\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n    });\n  }\n\n  startGame() {\n    this.setState({\n      started: true,\n    });\n  }\n\n  getHistory() {\n    return this.state.history;\n  }\n\n  getBoard(step) {\n    return this.state.history[step];\n  }\n\n  getCurrentBoard() {\n    return this.state.history[this.state.stepNumber];\n  }\n\n  getCoordinate(step) {\n    const currentBoard = this.getBoard(step);\n    const location = currentBoard.location;\n    const coordinate = calculateCoordinate(location);\n    return coordinate;\n  }\n\n  toggleClicked() {\n    alert('Clicked!');\n  }\n\n  render() {\n    const history = this.getHistory();\n    const currentBoard = this.getCurrentBoard();\n    const winner = calculateWinner(currentBoard.squares);\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    const moves = history.map((step, move) => {\n      const coordinate = this.getCoordinate(move);\n      const desc = move\n        ? 'Go to move #' + move + ': at ' + coordinate\n        : 'Go to game start';\n      return (\n        <li key={move}>\n          <button\n            className={`${this.state.stepNumber === move ? 'currentStep' : ''}`}\n            onClick={() => this.jumpTo(move)}\n          >\n            {desc}\n          </button>\n        </li>\n      );\n    });\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={currentBoard.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>\n            <Toggle onClick={this.toggleClicked()} />\n          </div>\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction calculateCoordinate(location) {\n  const board = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n  ];\n\n  const col = location % 3;\n  let row = 0;\n  for (let i = 0; i < board.length; i++) {\n    if (board[i].includes(location)) {\n      row = i;\n    }\n  }\n\n  return `(${col}, ${row})`;\n}\n"],"sourceRoot":""}